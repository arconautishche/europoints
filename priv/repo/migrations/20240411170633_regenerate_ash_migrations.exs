defmodule Pointex.Repo.Migrations.RegenerateAshMigrations do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:songs, primary_key: false) do
      add :country, :text, null: false, primary_key: true
      add :flag, :text, null: false
      add :artist, :text, null: false
      add :name, :text, null: false
      add :img, :text, null: false
      add :order_in_sf1, :bigint
      add :order_in_sf2, :bigint
      add :order_in_final, :bigint
      add :final_place, :bigint
      add :year, :bigint, null: false, primary_key: true
    end

    create table(:ash_watch_parties, primary_key: false) do
      add :id, :uuid, null: false, primary_key: true
      add :name, :text, null: false
      add :show_id, :uuid, null: false
    end

    create table(:ash_shows, primary_key: false) do
      add :id, :uuid, null: false, primary_key: true
    end

    alter table(:ash_watch_parties) do
      modify :show_id,
             references(:ash_shows,
               column: :id,
               name: "ash_watch_parties_show_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:ash_shows) do
      add :kind, :text, null: false
      add :year, :bigint, null: false
    end

    create table(:ash_seasons, primary_key: false) do
      add :year, :bigint, null: false, primary_key: true
    end

    alter table(:songs) do
      modify :year,
             references(:ash_seasons,
               column: :year,
               name: "songs_year_fkey",
               type: :bigint,
               prefix: "public"
             )
    end

    create unique_index(:songs, [:year, :country], name: "songs_song_in_season_index")

    alter table(:ash_shows) do
      modify :year,
             references(:ash_seasons,
               column: :year,
               name: "ash_shows_year_fkey",
               type: :bigint,
               prefix: "public"
             )
    end

    create unique_index(:ash_shows, [:year, :kind], name: "ash_shows_show_in_season_index")

    alter table(:ash_seasons) do
      add :active, :boolean, null: false, default: true
    end

    create table(:ash_participants, primary_key: false) do
      add :id, :uuid, null: false, primary_key: true
      add :owner, :boolean, null: false, default: false
      add :account_id, :uuid, null: false
      add :watch_party_id, :uuid, null: false
    end

    create table(:ash_accounts, primary_key: false) do
      add :id, :uuid, null: false, primary_key: true
    end

    alter table(:ash_participants) do
      modify :account_id,
             references(:ash_accounts,
               column: :id,
               name: "ash_participants_account_id_fkey",
               type: :uuid,
               prefix: "public"
             )

      modify :watch_party_id,
             references(:ash_watch_parties,
               column: :id,
               name: "ash_participants_watch_party_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:ash_accounts) do
      add :name, :text, null: false
      add :inserted_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("now()")
    end
  end

  def down do
    alter table(:ash_accounts) do
      remove :updated_at
      remove :inserted_at
      remove :name
    end

    drop constraint(:ash_participants, "ash_participants_account_id_fkey")

    drop constraint(:ash_participants, "ash_participants_watch_party_id_fkey")

    alter table(:ash_participants) do
      modify :watch_party_id, :uuid
      modify :account_id, :uuid
    end

    drop table(:ash_accounts)

    drop table(:ash_participants)

    alter table(:ash_seasons) do
      remove :active
    end

    drop_if_exists unique_index(:ash_shows, [:year, :kind],
                     name: "ash_shows_show_in_season_index"
                   )

    drop constraint(:ash_shows, "ash_shows_year_fkey")

    alter table(:ash_shows) do
      modify :year, :bigint
    end

    drop_if_exists unique_index(:songs, [:year, :country], name: "songs_song_in_season_index")

    drop constraint(:songs, "songs_year_fkey")

    alter table(:songs) do
      modify :year, :bigint
    end

    drop table(:ash_seasons)

    alter table(:ash_shows) do
      remove :year
      remove :kind
    end

    drop constraint(:ash_watch_parties, "ash_watch_parties_show_id_fkey")

    alter table(:ash_watch_parties) do
      modify :show_id, :uuid
    end

    drop table(:ash_shows)

    drop table(:ash_watch_parties)

    drop table(:songs)
  end
end
